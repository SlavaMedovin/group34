4. 


JSON
 4. Создать внешний репозиторий c названием JSON.		// Create new repository JSON on https://github.com/new  
 5. Клонировать репозиторий JSON на локальный компьютер.	 git clone 'https://github.com/SlavaMedovin/JSON.git'
 6. Внутри локального JSON создать файл “new.json”.             touch new.json
 7. Добавить файл под гит.  					git add .
 8. Закоммитить файл.						git commit -m 'added new.json'
 9. Отправить файл на внешний GitHub репозиторий.		git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
		
nano new.json 
{ 	"Vyacheslav Potapov " : 34,
	"Salary": "1500 €"
	"Pets" : 0
}

 11. Отправить изменения на внешний репозиторий. 		git add .
								git commit -m 'edited new.json'
								git push

 12. Создать файл preferences.json        			touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
		 
nano preferences.json
{ "Favorite movie": "Snatch",
"Favorite series": "Vikings",
"Favorite food":"Rice",
"Favorite season":"Summer",
"Country":"USA"
}



 14. Создать файл skils.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON   touch skills.json
nano skills.json
{"GitHub" : "Terminal",
  "Sniffers":["Fiddler","Charlers"],
  "DevTools":["Chrome","Firefox"],
  "SQL" : ["CRUD","Join","COUNT"],
  "Mobile testing": ["Xcode","AndroidStudio"]

}

 15. Отправить сразу 2 файла на внешний репозиторий. 
git add .
git commit -m '2 added files'
git push

 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON git 







XML
 21. Создать внешний репозиторий c названием XML.        
 22. Клонировать репозиторий XML на локальный компьютер.  				//Open GitBash ins folder XML on local computer,then  $ git clone 'https://github.com/SlavaMedovin/XML.git'
 23. Внутри локального XML создать файл “new.xml”.					touch new.xml
 24. Добавить файл под гит.								git add new.xml
 25. Закоммитить файл.									git commit -m 'added new.xml'
 26. Отправить файл на внешний GitHub репозиторий.  					git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. 

nano new.xml
<info>
        <name>Vyacheslav Potapov</name>
        <age>35</age>
        <>pet - Panthera</>
        <>Salary = 2000 Euro</>
</info>


 28. Отправить изменения на внешний репозиторий.	git add .
							git commit -m 'edited new.xml'
							git push					
 29. Создать файл preferences.xml			touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.

nano preferences.xml

<info>
<Favorite movie> "Snatch"</Favorite movie> 
<Favorite series>: "Vikings",</Favorite series>
<Favorite food>"Rice",</Favorite food>
<Favorite season>"Summer"</Favorite season>
<Country>"USA"</Country>
</info>



 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 32. Сделать коммит в одну строку.
 33. Отправить сразу 2 файла на внешний репозиторий.
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML

