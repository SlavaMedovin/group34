{
	"info": {
		"_postman_id": "98b8e7cf-b5d9-4bb5-8f45-76700679e788",
		"name": "gr34_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20039475"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check string body',()=>{\r",
							"    pm.expect(pm.response.text()).to.include('This is the first responce from server!ss')\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/first",
					"host": [
						"{{server}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3_TESTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json()\r",
							"let req = request.data\r",
							"\r",
							"console.log (req)\r",
							"\r",
							"pm.test('Check user name ', function () {\r",
							"    pm.expect(resp.name).to.eql('Slava')\r",
							"});\r",
							"pm.test('Check user age',function (){\r",
							"    pm.expect(+resp.age).to.eql(36)\r",
							"})\r",
							"pm.test('Check user salary',function (){\r",
							"    pm.expect(resp.salary).to.eql(2000)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test('Name Resp-req match',function (){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"pm.test('Age Resp-req match',function (){\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"pm.test('Salary Resp-req match', ()=> {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"console.log(resp.family)\r",
							"\r",
							"pm.test('User Salary 1_5 year', ()=> {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/user_info_3",
					"host": [
						"{{server}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "str",
							"disabled": true
						},
						{
							"key": "age",
							"value": "int",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3_TESTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"let resp = pm.response.json()\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// console.log(req)\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Check name Resp-req match',()=>{\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"\r",
							"pm.test('Check Age Resp-req match',()=>{\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"\r",
							"pm.test('Check Salary Resp-req match',()=>{\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"console.log(resp.family)\r",
							"\r",
							"pm.test('Check paramet Dog.name',()=>{\r",
							"    pm.expect(resp.family.pets.dog).to.property('name')\r",
							"\r",
							"})\r",
							"\r",
							"pm.test('Check parametr Dog.age',()=>{\r",
							"    pm.expect(resp.family.pets.dog).to.property('age')\r",
							"})\r",
							" \r",
							"pm.test(\"Check Name-Luky\",()=> {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky')\r",
							"})\r",
							"\r",
							"pm.test(\"Check Age-4\",()=> {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{server}}/object_info_3?name=Slava&age=35&salary=1500",
					"host": [
						"{{server}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Slava"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4_TESTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Setting variables for request and response data\r",
							"let resp = pm.response.json()\r",
							"let req =pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"pm.test('Name resp-req match',()=>{\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test('Age resp-req match',()=>{\r",
							"    pm.expect(resp.age).to.eql(+req.age)\r",
							"})\r",
							"\r",
							"console.log(resp.salary)\r",
							"console.log(req.salary)\r",
							"\r",
							"// Printing salary values to the console\r",
							"console.log(resp.salary[0])\r",
							"console.log(resp.salary[1])\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"pm.test('Check Salary and salary[0] req-resp match',()=>{\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"pm.test('Check Salary and salary[1] req-resp match',()=>{\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2)\r",
							"})\r",
							"pm.test('Check Salary and salary[2] req-resp match',()=>{\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3)\r",
							"})\r",
							"\r",
							"pm.environment.set('name',resp.name)\r",
							"pm.environment.set('age',resp.age)\r",
							"pm.environment.set('salary',resp.salary[0])\r",
							"\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"// 21.1\r",
							"var salary = resp.salary\r",
							"for (i in salary) {\r",
							"    console.log(salary[i])\r",
							"};\r",
							"\r",
							"// 21.2\r",
							"resp.salary.forEach(i => console.log(i));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/object_info_4?name=Slava&age=35&salary=1500",
					"host": [
						"{{server}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Slava"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2_TESTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.json()\r",
							"var req = request.data\r",
							"\r",
							"pm.test(\"start_qa_salary parameter is present in response\", () => {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"pm.test('qa_salary_after_6_months',()=>{\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"pm.test('qa_salary_after_12_months',()=>{\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year parameter is present in response\", () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years parameter is present in response\", () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"person parameter is present in response\", () => {\r",
							"    pm.expect(resp).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"pm.test(\"Salary and start_qa_salary req-resp check\"), () => {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req.salary)\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months calculation\", () => {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months calculation\", () => {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year calculation\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years calculation\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Check person.u_name[1] matches req]',()=> {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"age and u_age req-resp check\", () => {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_5_years calculation\", () => {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"  })\r",
							"\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"var person_values = Object.values(resp.person); // Получаем все значения объекта в виде массива\r",
							"for (var i = 0; i < person_values.length; i++) {\r",
							"    console.log(\"\" + person_values[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/user_info_2?{{name}}&{{age}}&{{salary}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "{{name}}",
							"value": null
						},
						{
							"key": "{{age}}",
							"value": null
						},
						{
							"key": "{{salary}}",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	]
}